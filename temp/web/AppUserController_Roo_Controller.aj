// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aureabox.webcore.web;

import com.aureabox.webcore.model.AppRole;
import com.aureabox.webcore.model.AppUser;
import com.aureabox.webcore.model.Email;
import com.aureabox.webcore.model.Gender;
import com.aureabox.webcore.model.IdentificationType;
import com.aureabox.webcore.model.Nationality;
import com.aureabox.webcore.model.Phone;
import com.aureabox.webcore.model.Place;
import com.aureabox.webcore.model.UserStatus;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AppUserController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String AppUserController.create(@Valid AppUser appUser, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("appUser", appUser);
            addDateTimeFormatPatterns(uiModel);
            return "appusers/create";
        }
        uiModel.asMap().clear();
        appUser.persist();
        return "redirect:/appusers/" + encodeUrlPathSegment(appUser.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String AppUserController.createForm(Model uiModel) {
        uiModel.addAttribute("appUser", new AppUser());
        addDateTimeFormatPatterns(uiModel);
        return "appusers/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String AppUserController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("appuser", AppUser.findAppUser(id));
        uiModel.addAttribute("itemId", id);
        return "appusers/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String AppUserController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("appusers", AppUser.findAppUserEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) AppUser.countAppUsers() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("appusers", AppUser.findAllAppUsers());
        }
        addDateTimeFormatPatterns(uiModel);
        return "appusers/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String AppUserController.update(@Valid AppUser appUser, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("appUser", appUser);
            addDateTimeFormatPatterns(uiModel);
            return "appusers/update";
        }
        uiModel.asMap().clear();
        appUser.merge();
        return "redirect:/appusers/" + encodeUrlPathSegment(appUser.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String AppUserController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("appUser", AppUser.findAppUser(id));
        addDateTimeFormatPatterns(uiModel);
        return "appusers/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String AppUserController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        AppUser.findAppUser(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/appusers";
    }
    
    @ModelAttribute("approles")
    public Collection<AppRole> AppUserController.populateAppRoles() {
        return AppRole.findAllAppRoles();
    }
    
    @ModelAttribute("appusers")
    public Collection<AppUser> AppUserController.populateAppUsers() {
        return AppUser.findAllAppUsers();
    }
    
    @ModelAttribute("emails")
    public Collection<Email> AppUserController.populateEmails() {
        return Email.findAllEmails();
    }
    
    @ModelAttribute("genders")
    public Collection<Gender> AppUserController.populateGenders() {
        return Arrays.asList(Gender.class.getEnumConstants());
    }
    
    @ModelAttribute("identificationtypes")
    public Collection<IdentificationType> AppUserController.populateIdentificationTypes() {
        return Arrays.asList(IdentificationType.class.getEnumConstants());
    }
    
    @ModelAttribute("nationalitys")
    public Collection<Nationality> AppUserController.populateNationalitys() {
        return Nationality.findAllNationalitys();
    }
    
    @ModelAttribute("phones")
    public Collection<Phone> AppUserController.populatePhones() {
        return Phone.findAllPhones();
    }
    
    @ModelAttribute("places")
    public Collection<Place> AppUserController.populatePlaces() {
        return Place.findAllPlaces();
    }
    
    @ModelAttribute("userstatuses")
    public Collection<UserStatus> AppUserController.populateUserStatuses() {
        return Arrays.asList(UserStatus.class.getEnumConstants());
    }
    
    void AppUserController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("appUser_creationdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("appUser_updatedate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("appUser_birthday_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("appUser_lastlogindate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String AppUserController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
