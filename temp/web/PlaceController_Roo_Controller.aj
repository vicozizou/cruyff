// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aureabox.webcore.web;

import com.aureabox.webcore.model.Location;
import com.aureabox.webcore.model.Place;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PlaceController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String PlaceController.create(@Valid Place place, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("place", place);
            return "places/create";
        }
        uiModel.asMap().clear();
        place.persist();
        return "redirect:/places/" + encodeUrlPathSegment(place.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PlaceController.createForm(Model uiModel) {
        uiModel.addAttribute("place", new Place());
        List dependencies = new ArrayList();
        if (Location.countLocations() == 0) {
            dependencies.add(new String[]{"location", "locations"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "places/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String PlaceController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("place", Place.findPlace(id));
        uiModel.addAttribute("itemId", id);
        return "places/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PlaceController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("places", Place.findPlaceEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Place.countPlaces() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("places", Place.findAllPlaces());
        }
        return "places/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String PlaceController.update(@Valid Place place, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("place", place);
            return "places/update";
        }
        uiModel.asMap().clear();
        place.merge();
        return "redirect:/places/" + encodeUrlPathSegment(place.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String PlaceController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("place", Place.findPlace(id));
        return "places/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String PlaceController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Place.findPlace(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/places";
    }
    
    @ModelAttribute("locations")
    public Collection<Location> PlaceController.populateLocations() {
        return Location.findAllLocations();
    }
    
    @ModelAttribute("places")
    public Collection<Place> PlaceController.populatePlaces() {
        return Place.findAllPlaces();
    }
    
    String PlaceController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
